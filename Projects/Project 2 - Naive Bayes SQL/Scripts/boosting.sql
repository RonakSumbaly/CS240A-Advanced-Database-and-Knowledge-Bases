------ BOOSTING ------

------ INITIALIZATION ------

CONNECT TO SAMPLE~

DROP PROCEDURE UPDATE_TRAIN~
DROP PROCEDURE UPDATE_NBC~
DROP PROCEDURE UPDATE_RESULTS~
DROP PROCEDURE BOOST_ONCE~
DROP PROCEDURE BOOST_FIXPOINT~
DROP TABLE TEMP~

------ PROCEDURE ------

CREATE PROCEDURE UPDATE_TRAIN(ITERATION INTEGER)
BEGIN
	CREATE TABLE TEMP(ROW INTEGER);
	INSERT INTO TEMP	
	WITH 
		PROBABILITY(ROW, PREDICTED, PROB) AS
		(SELECT TRAIN_DATASET.PID, NBC.DECISION, NBC.PROBABILITY
			FROM TRAIN_DATASET, NBC
			WHERE TRAIN_DATASET.COLUMNNO = NBC.COL 
			AND TRAIN_DATASET.ATT = NBC.ATT
			AND TRAIN_DATASET.WEIGHT > 0 
			AND NBC.NUM = ITERATION - 1),
		PROBABILITYSUM(ROW, PREDICTED, PROB) AS
		(SELECT ROW, PREDICTED, SUM(LOG(PROB)) FROM PROBABILITY GROUP BY ROW, PREDICTED),
		WEIGHTPROB(ROW, PREDICTED, PROB) AS
		(SELECT PROBABILITYSUM.ROW, PROBABILITYSUM.PREDICTED, PROBABILITYSUM.PROB + LOG(NBC.PROBABILITY)
			FROM PROBABILITYSUM, NBC
			WHERE PROBABILITYSUM.PREDICTED = NBC.DECISION
			AND NBC.NUM = ITERATION - 1),
		MAXPROB(ROW, PROBABILITY) AS
		(SELECT ROW, MAX(PROB) FROM WEIGHTPROB GROUP BY ROW)
	(SELECT TD.PID
	FROM TRAIN_DATASET as TD, MAXPROB as MP, WEIGHTPROB AS WP
	WHERE TD.PID = MP.ROW
	AND TD.PID = WP.ROW
	AND MP.PROBABILITY = WP.PROB
	AND TD.COLUMNNO = 1
	AND TD.DECISION <> WP.PREDICTED);
	UPDATE TRAIN_DATASET SET WEIGHT = WEIGHT * 2 WHERE WEIGHT > 0 AND 
		PID NOT IN (SELECT ROW FROM TEMP);
	DROP TABLE TEMP;
END~


CREATE PROCEDURE UPDATE_NBC(ITERATION INTEGER)
BEGIN
	INSERT INTO NBC(NUM, COL, ATT, DECISION, PROBABILITY)
	WITH GROUPED_DATA(COLUMNNO, DECISION, ATT, SUM_WEIGHT) AS 
	(SELECT COLUMNNO, DECISION, ATT, SUM(WEIGHT)
	 	FROM TRAIN_DATASET
		 GROUP BY GROUPING SETS((COLUMNNO,DECISION), (COLUMNNO, DECISION, ATT)))
	(SELECT ITERATION, GD1.COLUMNNO, GD1.ATT, GD1.DECISION,
			CAST(GD1.SUM_WEIGHT AS DECIMAL(6,0)) / CAST(GD2.SUM_WEIGHT AS DECIMAL(6,0))
			FROM GROUPED_DATA AS GD1 , GROUPED_DATA AS GD2
			WHERE GD1.COLUMNNO = GD2.COLUMNNO
			AND GD1.DECISION = GD2.DECISION
			AND GD1.ATT IS NOT NULL
			AND GD2.ATT IS NULL);
	INSERT INTO NBC_CLASS(NUM, DECISION, PROBABILITY)
	WITH TotalCount(VALUE) AS (SELECT SUM(WEIGHT) FROM TRAIN_DATASET WHERE COLUMNNO = 1),
		ClassCount(DECISION, VALUE) AS (SELECT DECISION, SUM(WEIGHT) FROM TRAIN_DATASET WHERE COLUMNNO = 1 GROUP BY DECISION)
	(SELECT ITERATION, classObj.DECISION,
			CAST(classObj.VALUE AS DECIMAL(10,0)) / CAST(totalObj.VALUE AS DECIMAL(10,0)) 
			FROM TotalCount as totalObj, ClassCount as classObj);
END~

CREATE PROCEDURE UPDATE_RESULTS(ITERATION INTEGER)
BEGIN
	INSERT INTO TEST_RESULTS(NUM, COLUMN, ACTUAL, PREDICTED)
	WITH
		PROBABILITY(ROW, PREDICTED, PROB) AS
		(SELECT TEST_DATASET.PID, NBC.DECISION, NBC.PROBABILITY
			FROM TEST_DATASET, NBC
			WHERE TEST_DATASET.COLUMNNO = NBC.COL 
			AND TEST_DATASET.ATT = NBC.ATT
			AND TEST_DATASET.WEIGHT > 0
			AND NBC.NUM = ITERATION),
		PROBABILITYSUM(ROW, PREDICTED, PROB) AS
		(SELECT ROW, PREDICTED, SUM(LOG(PROB)) FROM PROBABILITY GROUP BY ROW, PREDICTED),
		WEIGHTPROB(ROW, PREDICTED, PROB) AS
		(SELECT PROBABILITYSUM.ROW, PROBABILITYSUM.PREDICTED, PROBABILITYSUM.PROB + LOG(NBC.PROBABILITY)
		FROM PROBABILITYSUM, NBC
		WHERE PROBABILITYSUM.PREDICTED = NBC.DECISION
		AND NBC.NUM = ITERATION),
		MAXPROB(ROW, PROBABILITY) AS
		(SELECT ROW, MAX(PROB) FROM WEIGHTPROB GROUP BY ROW)
	(SELECT ITERATION, TD.PID, TD.DECISION, WP.PREDICTED
	FROM TEST_DATASET as TD, MAXPROB as MP, WEIGHTPROB AS WP
	WHERE TD.PID = MP.ROW
	AND TD.PID = WP.ROW
	AND MP.PROBABILITY = WP.PROB
	AND TD.COLUMNNO = 1);
	

	INSERT INTO COMBINED_RESULTS(NUM, ACCURACY)
		WITH
			SUCCESS(NUM) AS
				(SELECT COUNT(PREDICTED) FROM TEST_RESULTS WHERE PREDICTED = ACTUAL AND NUM = ITERATION),
			TOTAL(NUM) AS
				(SELECT COUNT(PREDICTED) FROM TEST_RESULTS WHERE NUM = ITERATION)
			(SELECT ITERATION, CAST(SUCCESS.num AS DECIMAL(10,0))/CAST(TOTAL.num AS DECIMAL(10,0))
			FROM SUCCESS, TOTAL);
END~

CREATE PROCEDURE boost_once(iteration INTEGER)
BEGIN
	CALL update_train(iteration);
	CALL update_NBC(iteration);
	CALL update_results(iteration);
END~

CREATE PROCEDURE boost_to_fixpoint()
BEGIN
	DECLARE last_time DECIMAL(11,10) DEFAULT 0;
	DECLARE this_time DECIMAL(11,10);
	DECLARE iteration INTEGER DEFAULT 1;
	SELECT ACCURACY INTO this_time FROM COMBINED_RESULTS WHERE NUM = iteration;
	WHILE (this_time > last_time) DO
		SET iteration = iteration + 1;
		CALL boost_once(iteration);
		SET last_time = this_time;
		SELECT ACCURACY INTO this_time FROM COMBINED_RESULTS WHERE NUM = iteration;
	END WHILE;
END~


CALL boost_to_fixpoint()~